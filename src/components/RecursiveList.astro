---
import RecursiveListBranch from "@components/RecursiveListBranch.astro";

export interface AstroHeading {
  depth: number;
  slug: string;
  text: string;
}

export interface HeadingNode {
  nodes?: undefined | HeadingNode[];
  text?: string;
  slug?: string;
  depth?: number;
}

export interface Props {
  headings: AstroHeading[];
}

const { headings } = Astro.props;

const buildTree = (array: AstroHeading[]) => {
  const levels: HeadingNode[] = [{ nodes: undefined }];
  array.forEach(function (a) {
    levels.length = a.depth;
    levels[a.depth - 1].nodes = levels[a.depth - 1].nodes || [];
    levels[a.depth - 1].nodes?.push(a);
    levels[a.depth] = a;
  });

  return levels[0].nodes;
};

const prepareHeadings = (headings = [] as AstroHeading[]) => {
  // Has only H1
  if (headings.length <= 1) return null;

  const withFlattenedH1 = headings.map((heading) => {
    return heading.depth === 1
      ? { ...heading, depth: 2, text: "Overview", slug: "overview" }
      : heading;
  });

  const withAdjustedHeadings = withFlattenedH1.map((heading) => ({
    ...heading,
    depth: heading.depth - 1,
  }));

  return buildTree(withAdjustedHeadings);
};

const headingsAsTree = prepareHeadings(headings);
---

<style is:global>
  [data-is_navigation] {
    @apply transition-all text-primary p-4 pl-8 hidden lg:block lg:sticky lg:left-0 lg:top-28;
    transition-duration: 60ms;

    & ul li {
      @apply pl-2;
    }

    & a {
      @apply block ml-1;

      &:hover {
        text-decoration: underline;
      }
    }

    & li {
      @apply relative;

      & li {
        @apply text-sm leading-6;
        filter: brightness(0.9);
      }
      & svg {
        @apply opacity-0 absolute top-0 left-0 w-1;
        height: calc(1em * 1.5);
      }

      & li svg {
        @apply ml--3;
      }

      &.active > a,
      &.active > svg {
        @apply text-[#622cd5];
      }
      &.active > svg {
        @apply opacity-100 dark:opacity-75;
      }
    }
  }

  .dark [data-is_navigation] {
    li.active > a {
      color: #b497f9;
    }
    li.active > svg {
      color: #b497f9;
    }
  }
</style>
<script>
  interface state {
    active: HTMLLIElement | null;
    update: (newActiveElement: HTMLLIElement) => void;
  }

  let articleElement = document.querySelector("[data-is_article]");
  let articleHeadings =
    articleElement?.querySelectorAll("h1, h2, h3, h4, h5, h6") ?? [];

  let articleNavigation = document.querySelector("[data-is_navigation]");

  let articleNavigationFirstItem = articleNavigation?.querySelector("li");

  let observer: IntersectionObserver | null = null;

  let state: state = {
    active: null,
    update: (newActiveElement: HTMLLIElement) => {
      if (state.active) state.active.classList.remove("active");
      state.active = newActiveElement;
      state.active.classList.add("active");
    },
  };

  if (articleNavigationFirstItem) state.update(articleNavigationFirstItem);

  if (articleElement && articleNavigation) {
    articleNavigation.addEventListener("click", (e) => {
      e.preventDefault();

      if (e.target) {
        const href = (e.target as HTMLElement)
          .getAttribute("href")
          ?.substring(1);
        document
          .querySelector(`[id='${href}']`)
          ?.scrollIntoView({ behavior: "smooth" });

        history.pushState(null, "", `#${href}`);
      }

      articleHeadings.forEach((heading) => {
        observer?.unobserve(heading);
      });
      let targetElement = (e.target as HTMLElement).closest("li");
      if (targetElement) {
        state.update(targetElement);
      }
      // This is really a hotfix. What I actually need is to observe the scroll event
      setTimeout(() => {
        articleHeadings.forEach((heading) => {
          observer?.observe(heading);
        });
      }, 800);
    });

    observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute("id");
          if (entry.intersectionRatio > 0) {
            let element = articleNavigation?.querySelector(
              `li a[href="#${id}"]`
            )?.parentElement;
            if (element) state.update(element as HTMLLIElement);
          }
        });
      },
      { rootMargin: "-100px 0% -66%", threshold: 1 }
    );

    // To Fix: should observe only while scrolling
    articleHeadings.forEach((heading) => {
      observer && observer.observe(heading);
    });
  }
</script>
<nav data-is_navigation>
  {
    headingsAsTree ? (
      <ul>
        {headingsAsTree.map((branch) => {
          const { slug, text, nodes } = branch || {};
          return <RecursiveListBranch slug={slug} text={text} nodes={nodes} />;
        })}
      </ul>
    ) : null
  }
</nav>
